rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones helper mejoradas
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isSuperAdmin() {
      return isAuthenticated() && getUserData().userType == 'superadmin';
    }

    function isAdmin() {
      return isAuthenticated() && getUserData().userType == 'admin';
    }

    // Reglas para la colecci贸n condos (simplificada para pruebas)
    match /condos/{condoId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin() || isAdmin();
    }

    // Reglas para la colecci贸n invitations
    match /invitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        (getUserData().userType in ['superadmin', 'admin']);
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        (getUserData().userType in ['superadmin', 'admin']);
    }

    // Reglas para la colecci贸n units
    match /units/{unitId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (getUserData().userType in ['superadmin', 'admin']);
    }

    // Reglas para la colecci贸n users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (getUserData().userType in ['superadmin', 'admin']);
    }
    
        // Reglas para lecturas principales
    match /meter-readings/{readingId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isAdmin() || isEditor());
    }

    // Reglas para lecturas individuales
    match /unit-readings/{readingId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isAdmin() || isEditor());
    }
  }
}