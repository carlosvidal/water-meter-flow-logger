rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones helper para verificar roles y permisos
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserActive() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }

    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.baseRole == 'superadmin';
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.baseRole == 'admin';
    }

    // Verifica si el usuario es admin de un condominio específico
    function isCondoAdmin(condoId) {
      return exists(/databases/$(database)/documents/userRoles/$(request.auth.uid))
        && get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'admin'
        && get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.condoId == condoId;
    }

    // Verifica si el usuario es editor de un condominio específico
    function isCondoEditor(condoId) {
      return exists(/databases/$(database)/documents/userRoles/$(request.auth.uid))
        && get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'editor'
        && get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.condoId == condoId;
    }

    // Verifica si el usuario es tenant de una unidad específica
    function isUnitTenant(unitId) {
      return get(/databases/$(database)/documents/units/$(unitId)).data.tenantUserId == request.auth.uid;
    }

    // Reglas para la colección users
    match /users/{userId} {
      // Lectura: usuario autenticado puede leer su propio documento
      // SuperAdmin y Admin pueden leer todos los documentos
      allow read: if isAuthenticated() 
        && (request.auth.uid == userId || isSuperAdmin() || isAdmin());
      
      // Escritura: solo SuperAdmin puede crear/actualizar usuarios
      // Los usuarios pueden actualizar sus propios datos básicos
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() 
        || (request.auth.uid == userId 
            && request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['name', 'phone', 'email']));
    }

    // Reglas para la colección userRoles
    match /userRoles/{roleId} {
      // Lectura: usuarios autenticados pueden ver roles
      allow read: if isAuthenticated();
      
      // Escritura: solo SuperAdmin puede crear/modificar roles
      allow write: if isSuperAdmin();
    }

    // Reglas para la colección condos
    match /condos/{condoId} {
      // Lectura: usuarios autenticados pueden ver condominios
      allow read: if isAuthenticated();
      
      // Escritura: SuperAdmin puede hacer todo
      // Admin puede actualizar condominios que administra
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() || isCondoAdmin(condoId);
      allow delete: if isSuperAdmin();
    }

    // Reglas para la colección units
    match /units/{unitId} {
      // Lectura: usuarios autenticados pueden ver unidades
      // que pertenecen a sus condominios
      allow read: if isAuthenticated() 
        && (isSuperAdmin() 
            || isCondoAdmin(resource.data.condoId)
            || isCondoEditor(resource.data.condoId)
            || isUnitTenant(unitId));
      
      // Escritura: SuperAdmin y Admin del condominio pueden crear/modificar unidades
      allow create: if isSuperAdmin() 
        || isCondoAdmin(request.resource.data.condoId);
      allow update: if isSuperAdmin() 
        || isCondoAdmin(resource.data.condoId);
      allow delete: if isSuperAdmin();
    }

    // Reglas para la colección meter-readings
    match /meter-readings/{readingId} {
      // Lectura: usuarios autenticados pueden ver lecturas
      // que pertenecen a sus condominios/unidades
      allow read: if isAuthenticated() 
        && (isSuperAdmin()
            || isCondoAdmin(resource.data.condoId)
            || isCondoEditor(resource.data.condoId)
            || isUnitTenant(resource.data.unitId));
      
      // Escritura: SuperAdmin, Admin y Editor pueden crear/modificar lecturas
      allow create: if isAuthenticated() 
        && (isSuperAdmin()
            || isCondoAdmin(request.resource.data.condoId)
            || isCondoEditor(request.resource.data.condoId));
      allow update: if isAuthenticated()
        && (isSuperAdmin()
            || isCondoAdmin(resource.data.condoId)
            || isCondoEditor(resource.data.condoId));
      allow delete: if isSuperAdmin();
    }
    
    
    match /invitations/{invitationId} {
      // Lectura: solo el creador y el email invitado pueden leer
      allow read: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         resource.data.email == request.auth.token.email);
      
      // Creación: solo usuarios autenticados con roles permitidos
      allow create: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.baseRole in ['superadmin', 'admin']);
      
      // Actualización: solo para cambiar el estado
      allow update: if request.auth != null && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedAt']);
    }
  }
}